---
apiVersion: v1
kind: Secret
metadata:
  name: $APP_INSTANCE_NAME-mysql-secret
  labels:
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-mysql
type: Opaque
data:
  root_password: "${ROOT_DB_PASSWORD}"
  # wordpress in Base64
  wp_user: d29yZHByZXNz
  wp_password: "${WORDPRESS_DB_PASSWORD}"
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: $APP_INSTANCE_NAME-mysql
  labels: &MySQLDeploymentLabels
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-mysql
spec:
  replicas: 1
  selector:
    matchLabels: *MySQLDeploymentLabels
  serviceName: $APP_INSTANCE_NAME-mysql-svc
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: *MySQLDeploymentLabels
    spec:
      containers:
      - image: $IMAGE_MYSQL
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $APP_INSTANCE_NAME-mysql-secret
              key: root_password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          valueFrom:
           secretKeyRef:
             name: $APP_INSTANCE_NAME-mysql-secret
             key: wp_user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $APP_INSTANCE_NAME-mysql-secret
              key: wp_password
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: $APP_INSTANCE_NAME-mysql-pvc
          mountPath: /var/lib/mysql
          subPath: data
        readinessProbe:
          exec:
            command: ["sh", "-c", "exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD"]
          initialDelaySeconds: 15
        livenessProbe:
          exec:
            command: ["sh", "-c", "exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD"]
          initialDelaySeconds: 120
  volumeClaimTemplates:
  - metadata:
      name: $APP_INSTANCE_NAME-mysql-pvc
      labels:
        app.kubernetes.io/name: "$APP_INSTANCE_NAME"
        app.kubernetes.io/component: wordpress-server
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: $APP_INSTANCE_NAME-mysql-svc
  labels:
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-mysql
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    app.kubernetes.io/name: $APP_INSTANCE_NAME
    app.kubernetes.io/component: wordpress-mysql
  clusterIP: None
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: $APP_INSTANCE_NAME-wordpress
  labels: &WordPressDeploymentLabels
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-webserver
spec:
  replicas: 1
  serviceName: $APP_INSTANCE_NAME-wordpress-svc
  selector:
    matchLabels: *WordPressDeploymentLabels
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: *WordPressDeploymentLabels
    spec:
      initContainers:
        - name: deny-access-before-configuration
          image: $IMAGE_WORDPRESS

          command: ["sh", "-c", "ipadm=$WPADMINISTRATOR_IP_ADDRESS; wpadm=/var/www/html/wp-admin/; if [[ -d $wpadm ]]; then exit; fi; mkdir -m755 $wpadm; chown www-data:www-data $wpadm; echo 'Require all denied\n<If \"%{HTTP_USER_AGENT} =~ /^(kube-probe|GoogleHC)/ && %{HTTP:X-Forwarded-For} =~ /^$/\">\n  Require all granted\n  DirectoryIndex /wp-admin/install.php\n</If>\n<If \"%{HTTP:X-Forwarded-For} =~ /^'${ipadm:=127.0.0.1}'/\">\n  Require all granted\n</If>' >> $wpadm/.htaccess"]
          volumeMounts:
          - name: $APP_INSTANCE_NAME-wordpress-pvc
            mountPath: /var/www/html
            subPath: wp
      containers:
      - image: $IMAGE_WORDPRESS
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: $APP_INSTANCE_NAME-mysql-svc
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: $APP_INSTANCE_NAME-mysql-secret
              key: wp_user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $APP_INSTANCE_NAME-mysql-secret
              key: wp_password
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: $APP_INSTANCE_NAME-wordpress-pvc
          mountPath: /var/www/html
          subPath: wp
        readinessProbe:
          httpGet:
            path: /wp-admin/install.php
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 2
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 120
  volumeClaimTemplates:
  - metadata:
      name: $APP_INSTANCE_NAME-wordpress-pvc
      labels:
        app.kubernetes.io/name: "$APP_INSTANCE_NAME"
        app.kubernetes.io/component: wordpress-webserver
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: $APP_INSTANCE_NAME-wordpress-svc
  labels:
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-webserver
spec:
  type: NodePort
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      name: http
  selector:
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-webserver
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: $APP_INSTANCE_NAME-wordpress
  labels:
    app.kubernetes.io/name: $APP_INSTANCE_NAME
    app.kubernetes.io/component: wordpress-webserver
spec:
  tls:
  - secretName: $APP_INSTANCE_NAME-tls
  backend:
    serviceName: $APP_INSTANCE_NAME-wordpress-svc
    servicePort: http
