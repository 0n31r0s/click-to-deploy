---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-mysql-secret
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-mysql
type: Opaque
stringData:
  wp-user: "{{ .Values.db.wordpressUser }}"
data:
  root-password: "{{ .Values.db.rootPassword }}"
  wp-password: "{{ .Values.db.wordpressPassword }}"
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-mysql
  labels: &MySQLDeploymentLabels
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-mysql
spec:
  replicas: 1
  selector:
    matchLabels: *MySQLDeploymentLabels
  serviceName: {{ .Release.Name }}-mysql-svc
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: *MySQLDeploymentLabels
    spec:
      containers:
      - image: {{ .Values.db.image }}
        name: mysql
        env:
        # A password for root superuser.
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: root-password
        # A database name to be created at startup.
        - name: MYSQL_DATABASE
          value: wordpress
        # A new user to be created at startup.
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: wp-user
        # A password of the new user created at startup.
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: wp-password
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: {{ .Release.Name }}-mysql-pvc
          mountPath: /var/lib/mysql
          subPath: data
        readinessProbe:
          exec:
            command: ["sh", "-c", "exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD"]
          initialDelaySeconds: 15
        livenessProbe:
          exec:
            command: ["sh", "-c", "exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD"]
          initialDelaySeconds: 120
      {{ if .Values.metrics.enabled }}
      - image: {{ .Values.metrics.images.mysqldExporter }}
        name: mysqld-exporter
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-mysql-secret
                key: root-password
          - name: DATA_SOURCE_NAME
            value: root:$(MYSQL_ROOT_PASSWORD)@({{ .Release.Name }}-mysql-svc:3306)/wordpress
      - image: {{ .Values.metrics.images.prometheusToSd }}
        name: prometheus-to-sd
        ports:
          - name: profiler
            containerPort: 6060
        command:
          - /monitor
          - --stackdriver-prefix=custom.googleapis.com
          - --source={{ .Release.Name }}:http://{{ .Release.Name }}-mysql-svc:9104/metrics
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          - --scrape-interval=5s
          - --export-interval=30s
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
      {{ end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-mysql-pvc
      labels:
        app.kubernetes.io/name: "{{ .Release.Name }}"
        app.kubernetes.io/component: wordpress-server
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-mysql-svc
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-mysql
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-mysql
  clusterIP: None
