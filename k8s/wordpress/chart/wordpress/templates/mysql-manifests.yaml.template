---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-mysql-secret
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-mysql
type: Opaque
stringData:
  wp-user: "{{ .Values.db.wordpressUser }}"
data:
  root-password: "{{ .Values.db.rootPassword }}"
  wp-password: "{{ .Values.db.wordpressPassword }}"
---
# TODO(wgrzelak): Use secret maybe ???
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-mysql-config
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: wordpress-mysql
data:
  mysqld_exporter.sql: |
    CREATE USER '{{ .Values.db.exporterUser }}'@'127.0.0.1' IDENTIFIED BY '{{ .Values.db.exporterPassword | b64dec }}' WITH MAX_USER_CONNECTIONS 3;
    GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO '{{ .Values.db.exporterUser }}'@'127.0.0.1';
    FLUSH PRIVILEGES;
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-mysql
  labels: &MySQLDeploymentLabels
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-mysql
spec:
  replicas: 1
  selector:
    matchLabels: *MySQLDeploymentLabels
  serviceName: {{ .Release.Name }}-mysql-svc
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: *MySQLDeploymentLabels
    spec:
      containers:
      - image: {{ .Values.db.image }}
        name: mysql
        env:
        # A password for root superuser.
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: root-password
        # A database name to be created at startup.
        - name: MYSQL_DATABASE
          value: wordpress
        # A new user to be created at startup.
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: wp-user
        # A password of the new user created at startup.
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: wp-password
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: {{ .Release.Name }}-mysql-pvc
          mountPath: /var/lib/mysql
          subPath: data
        - name: config-volume
          mountPath: /docker-entrypoint-initdb.d
          # TODO(wgrzelak): Checks what happens when the POD is removed.
          # subPath: config
        readinessProbe:
          exec:
            command: ["sh", "-c", "exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD"]
          initialDelaySeconds: 15
        livenessProbe:
          exec:
            command: ["sh", "-c", "exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD"]
          initialDelaySeconds: 120
      - image: {{ .Values.db.exporterImage }}
        name: mysqld-exporter
        env:
        # TODO(wgrzelak): Generate this password.
        - name: MYSQLD_EXPORTER_PASSWORD
          value: "{{ .Values.db.exporterPassword | b64dec }}"
        - name: DATA_SOURCE_NAME
          value: {{ .Values.db.exporterUser }}:$(MYSQLD_EXPORTER_PASSWORD)@(127.0.0.1:3306)/wordpress
        ports:
        - name: exporter
          containerPort: 9104
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9104
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9104
          initialDelaySeconds: 60
          timeoutSeconds: 30
          failureThreshold: 10
          periodSeconds: 10
      volumes:
      - name: config-volume
        configMap:
          name: {{ .Release.Name }}-mysql-config
          items:
          - key: mysqld_exporter.sql
            path: mysqld_exporter.sql
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-mysql-pvc
      labels:
        app.kubernetes.io/name: "{{ .Release.Name }}"
        app.kubernetes.io/component: wordpress-server
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-mysql-svc
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-mysql
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: wordpress-mysql
  clusterIP: None
